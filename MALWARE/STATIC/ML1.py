
import autoreload
#?autoreload


import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

import pickle as pickle

import random
random.seed(42)


from sklearn import preprocessing
from sklearn.model_selection import train_test_split

from sklearn.model_selection import cross_val_score

from sklearn.metrics import classification_report
import tensorflow as tf
from tensorflow.contrib.layers import fully_connected
import tensorflow as tf

sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))

#DATA
malware_data = pd.read_excel("mal.xlsx",header=None)
benign_data = pd.read_excel("ben.xlsx",header=None)

#dataset = pd.concat([benign_data, malware_data], ignore_index=True)

benign_data.insert(loc=0, column='classe', value='0')
malware_data.insert(loc=0, column='classe', value='1')
print(malware_data)
#dataset = pd.concat([benign_data, malware_data], ignore_index=True)
malware_data_sample = malware_data.sample(n=800, replace=True)
benign_data_sample = benign_data.sample(n=300, replace=True)
dataset = pd.concat([benign_data_sample, malware_data_sample], ignore_index=True)
#print(dataset.size())
print(dataset)
print("THIS IS DATASET X")
dataset_X = dataset.values[:,1:100]

print(dataset_X)
dataset_Y = dataset.values[:,0]
#print("----------------------------------------------------------")
#print("dataset ",len(dataset)," ",len(dataset[0]))
#print("dataset_X ",len(dataset_X)," ",len(dataset_X[0]))
#print("dataset_Y ",len(dataset_Y)," ",len(dataset_Y[0]))
#print("----------------------------------------------------------")

le = preprocessing.LabelEncoder()

dataset_X_pandas = pd.DataFrame(dataset_X,dtype=str)
dataset_X_pandas.apply(le.fit_transform)
#print(dataset_X)
dataset_X = dataset_X_pandas.apply(le.fit_transform).values[:,:]

X_train, X_test, Y_train, Y_test = train_test_split(dataset_X, dataset_Y, test_size=0.5, random_state=42)

print(X_train.shape, Y_train.shape)
print(X_test.shape, Y_test.shape)

from sklearn.preprocessing import MinMaxScaler

data = X_train
scaler = MinMaxScaler()
print(scaler.fit(data))

print(scaler.transform(data))

X_train = scaler.transform(data)
X_test = scaler.transform(X_test)

from sklearn import tree
print("DECISION TREE CLASSIFIER")
clf = tree.DecisionTreeClassifier()
clf.fit(X_train, Y_train)
acc_treino = clf.score(X_train, Y_train)
print("ACCURACY OF TRAINED SET: %f %%" % (acc_treino*100))

acc_teste = clf.score(X_test, Y_test)
print("ACCURACY OF TEST SET: %f %%" % (acc_teste*100))

Y_pred = clf.predict(X_test)
print(Y_pred,Y_test,"PRINTING RESULT")
target_names = ['Benign', 'Malware']
print(classification_report(Y_test, Y_pred, target_names=target_names))


print("KNEIGHBOURS CLASSIFIER")
from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier(n_neighbors=1, metric ='euclidean')
clf.fit(X_train, Y_train) 
acc_treino = clf.score(X_train, Y_train)
print("ACCURACY OF TRAINED SET: %f %%" % (acc_treino*100))

acc_teste = clf.score(X_test, Y_test)
print("ACCURACY OF TEST SET: %f %%" % (acc_teste*100))
scores = cross_val_score(clf, X_train, Y_train, cv=10)

Y_pred = clf.predict(X_test)
Y_pred = Y_pred.astype(str)
target_names = ['Benign', 'Malware']
print(classification_report(Y_test, Y_pred, target_names=target_names))


print("SVC")
from sklearn.svm import SVC


clf = SVC(class_weight='balanced')
clf.fit(X_train, Y_train)
acc_treino = clf.score(X_train, Y_train)
print("ACCURACY OF TRAINED SET: %f %%" % (acc_treino*100))

acc_teste = clf.score(X_test, Y_test)
print("ACCURACY OF TEST SET: %f %%" % (acc_teste*100))
Y_pred = clf.predict(X_test)
target_names = ['Benign', 'Malware']
print(classification_report(Y_test, Y_pred, target_names=target_names))


print("LOGISTIC REGRESSION")

from sklearn.datasets import load_iris
from sklearn.linear_model import LogisticRegression
clf = LogisticRegression( solver='lbfgs',
                         multi_class='multinomial').fit(X_train, Y_train)

acc_treino = clf.score(X_train, Y_train)
print("ACCURACY OF TRAINED SET: %f %%" % (acc_treino*100))

acc_teste = clf.score(X_test, Y_test)
print("ACCURACY OF TEST SET: %f %%" % (acc_teste*100))
Y_pred = clf.predict(X_test)
target_names = ['Benign', 'Malware']
print(classification_report(Y_test, Y_pred, target_names=target_names))

print("MLP CLASSIFIER")
from sklearn.neural_network import MLPClassifier
clf = MLPClassifier(solver='lbfgs', alpha=1e-5)

clf.fit(X_train, Y_train)
acc_treino = clf.score(X_train, Y_train)
print("ACCURACY OF TRAINED SET: %f %%" % (acc_treino*100))

acc_teste = clf.score(X_test, Y_test)
print("ACCURACY OF TEST SET: %f %%" % (acc_teste*100))
Y_pred = clf.predict(X_test)
target_names = ['Benign', 'Malware']
print(classification_report(Y_test, Y_pred, target_names=target_names))
